#!/usr/bin/env python3

import argparse
import json
import os
from datetime import datetime, timedelta
import openai
from dotenv import load_dotenv

load_dotenv()
openai.api_key = os.getenv('OPENAI_API_KEY')


FLASHCARDS_FILE = 'flashcards.json'

def load_flashcards():
    if os.path.exists(FLASHCARDS_FILE):
        with open(FLASHCARDS_FILE, 'r') as file:
            return json.load(file)
    else:
        return []

def save_flashcards(flashcards):
    with open(FLASHCARDS_FILE, 'w') as file:
        json.dump(flashcards, file, indent=4)

def add_flashcard(args):
    flashcards = load_flashcards()
    flashcard = {
        'id': len(flashcards) + 1,
        'front': args.front,
        'back': args.back,
        'tags': [tag.strip() for tag in args.tags.split(',')] if args.tags else [],
        'easiness_factor': 2.5,
        'interval': 1,
        'repetitions': 0,
        'next_review_date': datetime.now().strftime('%Y-%m-%d'),
        'review_history': []
    }
    flashcards.append(flashcard)
    save_flashcards(flashcards)
    print('Flashcard added successfully.')

def calculate_sm2(flashcard, quality):
    quality_mapping = {'h': 2, 'm': 3, 'e': 5, 'hard': 2, 'medium': 3, 'easy': 5}
    q = quality_mapping[quality]

    if q < 3:
        flashcard['repetitions'] = 0
        flashcard['interval'] = 1
    else:
        flashcard['easiness_factor'] = max(1.3, flashcard['easiness_factor'] + (0.1 - (5 - q) * (0.08 + (5 - q) * 0.02)))
        flashcard['repetitions'] += 1
        if flashcard['repetitions'] == 1:
            flashcard['interval'] = 1
        elif flashcard['repetitions'] == 2:
            flashcard['interval'] = 6
        else:
            flashcard['interval'] = int(flashcard['interval'] * flashcard['easiness_factor'])

    flashcard['next_review_date'] = (datetime.now() + timedelta(days=flashcard['interval'])).strftime('%Y-%m-%d')
    return flashcard

def review_flashcards(args):
    flashcards = load_flashcards()
    due_flashcards = [f for f in flashcards if datetime.strptime(f['next_review_date'], '%Y-%m-%d') <= datetime.now()]

    if not due_flashcards:
        print('No flashcards due for review today.')
        return

    for flashcard in due_flashcards:
        print(f"\nFront: {flashcard['front']}")
        user_answer = input("Your answer: ")

        try:
            # Use OpenAI GPT-4 to evaluate and provide feedback on the answer
            response = openai.chat.completions.create(
                model="gpt-4",
                messages=[
                    {
                        "role": "system",
                        "content": "You are a helpful and encouraging tutor. you are talking to the user that is answering the flashcard question. Evaluate the user's answer to the question, provide constructive feedback, and suggest improvements if needed. Also, assess the difficulty level as 'easy', 'medium', or 'hard' based on the user's response."
                    },
                    {
                        "role": "user",
                        "content": f"Question: {flashcard['front']}\nCorrect Answer: {flashcard['back']}\nUser's Answer: {user_answer}"
                    }
                ],
                max_tokens=50,
                n=1,
                stop=None,
                temperature=0.7,
            )

            feedback = response.choices[0].message.content
            print(f"\nTutor's Feedback: {feedback}")

            # Extract difficulty assessment from the feedback
            difficulty_levels = ['easy', 'medium', 'hard']
            grading = next((level for level in difficulty_levels if level in feedback.lower()), 'medium')

        except openai.RateLimitError as e:
            print("Error: OpenAI API rate limit exceeded. Please try again later.")
            print(f"Details: {str(e)}")
            return
        except openai.error.OpenAIError as e:
            print(f"An error occurred while using the OpenAI API: {str(e)}")
            return

        # Ask the user to rate the difficulty
        while True:
            quality = input("Rate the difficulty ('e' or 'easy', 'm' or 'medium', 'h' or 'hard'): ").strip().lower()
            if quality in ['e', 'm', 'h', 'easy', 'medium', 'hard']:
                break
            else:
                print("Invalid input. Please enter 'e' or 'easy', 'm' or 'medium', 'h' or 'hard'.")

        flashcard = calculate_sm2(flashcard, quality)
        flashcard['review_history'].append({
            'date': datetime.now().strftime('%Y-%m-%d'),
            'quality': quality,
            'user_answer': user_answer,
            'grading': grading
        })
        print(f"Next review in {flashcard['interval']} day(s).")
    save_flashcards(flashcards)
    print('\nReview session complete.')

def show_stats(args):
    flashcards = load_flashcards()
    total = len(flashcards)
    due = len([f for f in flashcards if datetime.strptime(f['next_review_date'], '%Y-%m-%d') <= datetime.now()])
    if total == 0:
        print('No flashcards available.')
        return
    avg_easiness = sum(f['easiness_factor'] for f in flashcards) / total
    print(f"Total flashcards: {total}")
    print(f"Flashcards due today: {due}")
    print(f"Average Easiness Factor: {avg_easiness:.2f}")

def main():
    parser = argparse.ArgumentParser(description='Anki-like flashcard application.')
    subparsers = parser.add_subparsers(dest='command', required=True)

    # Add command
    parser_add = subparsers.add_parser('add', help='Add a new flashcard.')
    parser_add.add_argument('--front', '-f', required=True, help='Front text of the flashcard.')
    parser_add.add_argument('--back', '-b', required=True, help='Back text of the flashcard.')
    parser_add.add_argument('--tags', '-t', help='Comma-separated tags for the flashcard.')
    parser_add.set_defaults(func=add_flashcard)

    # Review command
    parser_review = subparsers.add_parser('review', aliases=['r'], help='Review due flashcards.')
    parser_review.set_defaults(func=review_flashcards)

    # Stats command
    parser_stats = subparsers.add_parser('stats', help='Show study statistics.')
    parser_stats.set_defaults(func=show_stats)

    args = parser.parse_args()
    args.func(args)

if __name__ == '__main__':
    main()